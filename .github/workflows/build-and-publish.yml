# Note: This workflow requires some secrets setup, and set on this repo with the names:
# 'MMEX_PUBLISH_TOKEN' (A GitHub Personal Access Token with appropriate permissions - for publishing the built artifacts)
# 'APPLEID' (The username of your Apple developer account - for notarizing the mac artifacts)
# 'APPLEID_PASSWORD' (An app-specific password - for notarizing the mac artifacts)
# 'CSC_LINK' (The HTTPS link or local path to certificate - for code signing of mac artifacts)
# 'CSC_KEY_PASSWORD' (The password to decrypt the certificate given in CSC_LINK - for code signing of mac artifacts)
# 'WIN_CSC_LINK' (The HTTPS link or local path to certificate - for code signing of windows artifacts)
# 'WIN_CSC_KEY_PASSWORD' (The password to decrypt the certificate given in CSC_LINK - for code signing of windows artifacts)

name: Build and publish MMEX releases
on:
    push:
        tags:
            - "v*"
jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ ubuntu-22.04, windows-2022, macos-12 ]
        env:
            MACOS_VERSION: '12.5'
            WINDOWS_VISUAL_STUDIO_GENERATOR: 'Visual Studio 17 2022'
            WINDOWS_VISUAL_STUDIO_WXLibs_Folder: 'vc14x_x64_dll'
            WX_WIDGETS_VERSION: '3.2'
            WX_WIDGETS_VERSION_PATCH: '0'
        steps:
            -   name: Check out
                uses: actions/checkout@v3
                with:
                    submodules: 'recursive'

            -   name: (${{ runner.os }}) Install important software
                if: runner.os == 'Linux'
                run: |
                    sudo apt-key adv --fetch-keys https://repos.codelite.org/CodeLite.asc
                    sudo apt-add-repository 'deb https://repos.codelite.org/wx${{ env.WX_WIDGETS_VERSION }}.${{ env.WX_WIDGETS_VERSION_PATCH }}/ubuntu/ jammy universe'
                    sudo apt-get update
                    # Quiet apt-get or github actions will exit code 143 the pipeline run.
                    sudo apt-get install --no-install-recommends \
                        clang \
                        cmake \
                        gettext \
                        libcurl4-openssl-dev \
                        liblua5.3-dev \
                        libpcre2-32-0 \
                        libwxbase${{ env.WX_WIDGETS_VERSION }}-0-unofficial \
                        libwxbase${{ env.WX_WIDGETS_VERSION }}unofficial-dev \
                        libwxgtk-media${{ env.WX_WIDGETS_VERSION }}-0-unofficial \
                        libwxgtk-media${{ env.WX_WIDGETS_VERSION }}unofficial-dev \
                        libwxgtk-webview${{ env.WX_WIDGETS_VERSION }}-0-unofficial \
                        libwxgtk-webview${{ env.WX_WIDGETS_VERSION }}unofficial-dev \
                        libwxgtk${{ env.WX_WIDGETS_VERSION }}-0-unofficial \
                        libwxgtk${{ env.WX_WIDGETS_VERSION }}unofficial-dev \
                        libxtst6 \
                        rapidjson-dev \
                        wx-common \
                        wx${{ env.WX_WIDGETS_VERSION }}-headers \
                        wx${{ env.WX_WIDGETS_VERSION }}-i18n \
                        -qq > /dev/null

            -   name: (${{ runner.os }}) Install important software
                if: runner.os == 'macOS'
                run: brew install wxwidgets

            -   name: (${{ runner.os }}) Install important software
                if: runner.os == 'Windows'
                run: |
                    choco install --no-progress -y 7zip curl nsis
                    mkdir ${{ runner.temp }}\wxwidgets
                    curl -fsLOS --output-dir ${{ runner.temp }} https://github.com/wxWidgets/wxWidgets/releases/download/v${env:WX_WIDGETS_VERSION}.${{ env.WX_WIDGETS_VERSION_PATCH }}/wxWidgets-${env:WX_WIDGETS_VERSION}.${{ env.WX_WIDGETS_VERSION_PATCH }}-headers.7z
                    curl -fsLOS --output-dir ${{ runner.temp }} https://github.com/wxWidgets/wxWidgets/releases/download/v${env:WX_WIDGETS_VERSION}.${{ env.WX_WIDGETS_VERSION_PATCH }}/wxMSW-${env:WX_WIDGETS_VERSION}.${{ env.WX_WIDGETS_VERSION_PATCH }}_vc14x_x64_Dev.7z
                    7z x -aoa ${{ runner.temp }}\wxWidgets-${env:WX_WIDGETS_VERSION}.${{ env.WX_WIDGETS_VERSION_PATCH }}-headers.7z -o${{ runner.temp }}\wxwidgets
                    7z x -aoa ${{ runner.temp }}\wxMSW-${env:WX_WIDGETS_VERSION}.${{ env.WX_WIDGETS_VERSION_PATCH }}_vc14x_x64_Dev.7z -o${{ runner.temp }}\wxwidgets

            -   name: (${{ runner.os }}) Set up C++ Compiler
                if: runner.os == 'Linux'
                run: |
                    sudo update-alternatives --set cc /usr/bin/clang
                    sudo update-alternatives --set c++ /usr/bin/clang++

            -   name: (${{ runner.os }}) Build release
                if: runner.os == 'Linux'
                run: |
                    mkdir build
                    cd build/
                    export MAKEFLAGS=-j
                    # '-DCMAKE_CXX_FLAGS="-w"' or github actions will exit code 143 the pipeline run.
                    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-w" -DwxWidgets_CONFIG_EXECUTABLE=/usr/bin/wx-config ..
                    # "> /dev/null" or github actions will 'Killed' the pipeline run.
                    cmake --build . --target package > /dev/null

            -   name: (${{ runner.os }}) Build release
                if: runner.os == 'macOS'
                run: |
                    mkdir build
                    cd build
                    export MAKEFLAGS=-j
                    # '-DCMAKE_CXX_FLAGS="-w"' or github actions will exit code 143 the pipeline run.
                    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-w" -DMACOSX_DEPLOYMENT_TARGET=${{ env.MACOS_VERSION }} ..
                    cmake --build . --target package

            -   uses: ilammy/msvc-dev-cmd@v1 # Only for the Windows build environment. Does nothing in the others.
            -   name: (${{ runner.os }}) Build release
                if: runner.os == 'Windows'
                run: |
                    mkdir build
                    cd build
                    set "PATH=%PATH%;%DevEnvDir%CommonExtensions\Microsoft\CMake\CMake\bin"
                    set "CL=/MP"
                    setx wxLibFolder ${{ runner.temp }}\wxwidgets\lib\${{ env.WINDOWS_VISUAL_STUDIO_WXLibs_Folder }}
                    setx wxwin ${{ runner.temp }}\wxwidgets

                    cmake -G "${{ env.WINDOWS_VISUAL_STUDIO_GENERATOR }}" -A "x64" ..
                    cmake --build . --target install --config Release -- /maxcpucount /verbosity:minimal /nologo /p:PreferredToolArchitecture=x64
                    cpack .

            -   name: (${{ runner.os }}) Show release
                if: runner.os == 'Linux'
                run: |
                    echo "ls -lha"
                    ls -lha
                    echo "ls -lha build"
                    ls -lha build

            -   name: (${{ runner.os }}) Show release
                if: runner.os == 'Windows'
                run: |
                    echo "dir"
                    dir
                    echo "dir build"
                    dir build

            -   name: (${{ runner.os }}) Upload artifact
                if: runner.os == 'macOS'
                uses: actions/upload-artifact@v3
                with:
                    name: MacOS-Release
                    path: build/*.dmg

            -   name: Do something on fail
                if: ${{ failure() }} && runner.os == 'Linux'
                run: |
                    echo "ls -lha"
                    ls -lha
                    echo "ls -lha build"
                    ls -lha build
            -   name: Do something on fail
                if: ${{ failure() }} && runner.os == 'Windows'
                run: |
                    echo "dir"
                    dir
                    echo "dir build"
                    dir build