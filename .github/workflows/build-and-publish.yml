# Note: This workflow requires some secrets setup, and set on this repo with the names:
# 'MMEX_PUBLISH_TOKEN' (A GitHub Personal Access Token with appropriate permissions - for publishing the built artifacts)
# 'APPLEID' (The username of your Apple developer account - for notarizing the mac artifacts)
# 'APPLEID_PASSWORD' (An app-specific password - for notarizing the mac artifacts)
# 'CSC_LINK' (The HTTPS link or local path to certificate - for code signing of mac artifacts)
# 'CSC_KEY_PASSWORD' (The password to decrypt the certificate given in CSC_LINK - for code signing of mac artifacts)
# 'WIN_CSC_LINK' (The HTTPS link or local path to certificate - for code signing of windows artifacts)
# 'WIN_CSC_KEY_PASSWORD' (The password to decrypt the certificate given in CSC_LINK - for code signing of windows artifacts)

name: Build and publish MMEX releases
on:
    push:
        tags:
            - "v*"
jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ ubuntu-latest, windows-latest, macos-latest ]
        env:
            CCACHE_DIR: ${{ github.workspace }}/.ccache
            WX_WIDGETS_VERSION: 3.1.7
        steps:
            -   name: Check out
                uses: actions/checkout@v3
                with:
                    submodules: 'recursive'

            -   name: (${{ runner.os }}) Install important software
                if: runner.os == 'Linux'
                run: |
                    sudo apt-key adv --fetch-keys https://repos.codelite.org/CodeLite.asc
                    sudo apt-add-repository 'deb https://repos.codelite.org/wx${WX_WIDGETS_VERSION}/ubuntu/ focal universe'
                    # Quiet apt-get or github actions will exit code 143 the pipeline run.
                    sudo apt-get update
                    # Quiet apt-get or github actions will exit code 143 the pipeline run.
                    sudo apt-get install --no-install-recommends \
                        ccache \
                        clang \
                        cmake \
                        gettext \
                        libcurl4-openssl-dev \
                        liblua5.3-dev \
                        libwxbase3.1-0-unofficial \
                        libwxbase3.1unofficial-dev \
                        libwxgtk-media3.1-0-unofficial \
                        libwxgtk-media3.1unofficial-dev \
                        libwxgtk-webview3.1-0-unofficial \
                        libwxgtk-webview3.1unofficial-dev \
                        libwxgtk3.1-0-unofficial \
                        libwxgtk3.1unofficial-dev \
                        rapidjson-dev \
                        wx-common \
                        wx3.1-headers \
                        wx3.1-i18n \
                        -qq > /dev/null

            -   name: (${{ runner.os }}) Install important software
                if: runner.os == 'macOS'
                run: brew install ccache wxwidgets

            -   name: (${{ runner.os }}) Install important software
                if: runner.os == 'Windows'
                run: |
                    choco install --no-progress -y 7zip ccache curl nsis
                    mkdir ${{ runner.temp }}\wxwidgets
                    curl -fsLOS --output-dir ${{ runner.temp }} https://github.com/wxWidgets/wxWidgets/releases/download/v${env:WX_WIDGETS_VERSION}/wxWidgets-${env:WX_WIDGETS_VERSION}-headers.7z
                    curl -fsLOS --output-dir ${{ runner.temp }} https://github.com/wxWidgets/wxWidgets/releases/download/v${env:WX_WIDGETS_VERSION}/wxMSW-${env:WX_WIDGETS_VERSION}_vc14x_x64_Dev.7z
                    curl -fsLOS --output-dir ${{ runner.temp }} https://github.com/wxWidgets/wxWidgets/releases/download/v${env:WX_WIDGETS_VERSION}/wxMSW-${env:WX_WIDGETS_VERSION}_vc14x_x64_ReleaseDLL.7z
                    7z x -aoa ${{ runner.temp }}\wxWidgets-${env:WX_WIDGETS_VERSION}-headers.7z -o${{ runner.temp }}\wxwidgets
                    7z x -aoa ${{ runner.temp }}\wxMSW-${env:WX_WIDGETS_VERSION}_vc14x_x64_Dev.7z -o${{ runner.temp }}\wxwidgets
                    7z x -aoa ${{ runner.temp }}\wxMSW-${env:WX_WIDGETS_VERSION}_vc14x_x64_ReleaseDLL.7z -o${{ runner.temp }}\wxwidgets

            -   name: Set up ccache
                run: |
                    mkdir ./.ccache
                    ccache -o compiler_check='%compiler% -dumpmachine; %compiler% -dumpversion'

            -   name: (${{ runner.os }}) Set up C++ Compiler
                if: runner.os == 'Linux'
                run: |
                    sudo update-alternatives --set cc /usr/bin/clang
                    sudo update-alternatives --set c++ /usr/bin/clang++

            -   name: Build cache
                uses: actions/cache@v3
                with:
                    path: ${{ github.workspace }}/.ccache
                    key: ${{ runner.os }}-build-cache-${{ hashFiles('**/lockfiles') }}
                    restore-keys: ${{ runner.os }}-build-cache

            -   name: (${{ runner.os }}) Build release
                if: runner.os == 'Linux'
                run: |
                    mkdir build
                    # Disable the warnings or github actions will exit code 143 the pipeline run.
                    export MAKEFLAGS=-j
                    # "> /dev/null" or github actions will exit code 143 the pipeline run.
                    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-w" -DwxWidgets_CONFIG_EXECUTABLE=/usr/bin/wx-config . > /dev/null
                    cd build
                    cmake --build . --target package

            -   name: (${{ runner.os }}) Build release
                if: runner.os == 'macOS'
                run: |
                    mkdir build
                    export MAKEFLAGS=-j
                    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-w" -DMACOSX_DEPLOYMENT_TARGET=11.6 .
                    cd build
                    cmake --build . --target package

            -   uses: ilammy/msvc-dev-cmd@v1 # Only for the Windows build environment. Does nothing in the others.
            -   name: (${{ runner.os }}) Build release
                if: runner.os == 'Windows'
                run: |
                    mkdir build
                    set "PATH=%PATH%;%DevEnvDir%CommonExtensions\Microsoft\CMake\CMake\bin"
                    set "CL=/MP"
                    setx wxwin ${{ runner.temp }}\wxwidgets

                    echo ${{ runner.temp }}\wxwidgets
                    dir ${{ runner.temp }}\wxwidgets

                    cmake -G "Visual Studio 17 2022" .
                    cd build
                    cmake --build . --target install --config Release -- /maxcpucount /verbosity:minimal /nologo /p:PreferredToolArchitecture=x64
                    cpack .

            -   name: (${{ runner.os }}) Show release
                if: runner.os == 'Linux'
                run: |
                    echo "ls -lha"
                    ls -lha
                    echo "ls -lha build"
                    ls -lha build

            -   name: (${{ runner.os }}) Show release
                if: runner.os == 'Windows'
                run: |
                    echo "dir"
                    dir
                    echo "dir build"
                    dir build

            -   name: (${{ runner.os }}) Upload artifact
                if: runner.os == 'macOS'
                uses: actions/upload-artifact@v3
                with:
                    name: MacOS-Release
                    path: build/*.dmg
